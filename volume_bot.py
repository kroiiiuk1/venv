import asyncio
import requests
from telegram import Bot
from pybit.unified_trading import WebSocket
from collections import deque
import numpy as np
import pandas as pd
import pandas_ta as ta
from datetime import datetime
import threading
import queue
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = '7387387044:AAGFdeu0kJH1IQ_e2PXegkF4z4WtWRrwL0A'
CHAT_ID = '-1002362256912'
VOLUME_THRESHOLD = 1.0  # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
PRICE_THRESHOLD = 1
LIQUIDATION_THRESHOLD = 100  # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
CHECK_INTERVAL = 120
EMA_SHORT_PERIOD = 5
EMA_LONG_PERIOD = 20
ATR_PERIOD = 14
ATR_MULTIPLIER = 1  # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
RSI_PERIOD = 14

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ API-–∫–ª—é—á–∏ Bybit —Å—é–¥–∞
API_KEY = 'ESUNXn5qTs26yci2W2'
API_SECRET = 'OtFi15vAl5pHyrOTHr6ZR2w2NmVk8aZtRzLi'

# –£—Ä–æ–≤–Ω–∏
COINS = {
    'bitcoin': {'id': 'bitcoin', 'symbol': 'BTCUSDT', 'levels': [84000, 84500, 85000]},
    'ethereum': {'id': 'ethereum', 'symbol': 'ETHUSDT', 'levels': [2100, 2130, 2160]},
    'solana': {'id': 'solana', 'symbol': 'SOLUSDT', 'levels': [132, 135, 138]},
    'ripple': {'id': 'ripple', 'symbol': 'XRPUSDT', 'levels': [2.2, 2.23, 2.26]},
    'cardano': {'id': 'cardano', 'symbol': 'ADAUSDT', 'levels': [0.76, 0.78, 0.80]}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(TELEGRAM_TOKEN)
ws = WebSocket(testnet=False, channel_type="linear", api_key=API_KEY, api_secret=API_SECRET)
liquidation_queue = queue.Queue()
first_liquidation_processed = False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429
def get_coin_data(coin_id):
    url = f'https://api.coingecko.com/api/v3/coins/{coin_id}'
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return {
            'volume': data['market_data']['total_volume']['usd'],
            'price': data['market_data']['current_price']['usd']
        }
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 429:
            print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {coin_id}. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
            return get_coin_data(coin_id)
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin_id}: {e}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin_id}: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message(chat_id, text):
    try:
        await bot.send_message(chat_id=chat_id, text=text)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–æ—è/–ø–æ–¥—Ö–æ–¥–∞ –∫ —É—Ä–æ–≤–Ω—è–º
def check_levels(coin_name, price, last_price, levels):
    closest_level = min(levels, key=lambda x: abs(x - price))
    diff_percent = ((price - closest_level) / closest_level) * 100
    if abs(diff_percent) <= PRICE_THRESHOLD and last_price is not None:
        if price > closest_level and last_price <= closest_level:
            return f"–ü—Ä–æ–±–∏—Ç —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è {closest_level} USD –≤–≤–µ—Ä—Ö"
        elif price < closest_level and last_price >= closest_level:
            return f"–ü—Ä–æ–±–∏—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {closest_level} USD –≤–Ω–∏–∑"
    elif abs(diff_percent) <= 1:
        return f"–ü–æ–¥—Ö–æ–¥ –∫ —É—Ä–æ–≤–Ω—é {closest_level} USD ({diff_percent:.1f}%)"
    return None

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ EMA
def calculate_ema(prices, period):
    if len(prices) < period:
        return sum(prices) / len(prices) if prices else 0
    prices = np.array(prices)
    weights = np.exp(np.linspace(-1., 0., period))
    weights /= weights.sum()
    ema = np.convolve(prices, weights, mode='valid')[0]
    return ema

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ RSI
def calculate_rsi(prices, period):
    if len(prices) < period + 1:
        return 50
    price_diff = np.diff(prices)
    gains = np.where(price_diff > 0, price_diff, 0)
    losses = np.where(price_diff < 0, -price_diff, 0)
    avg_gain = np.mean(gains[-period:]) if np.mean(gains[-period:]) else 0.0001
    avg_loss = np.mean(losses[-period:]) if np.mean(losses[-period:]) else 0.0001
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ ATR
def calculate_atr(prices, highs, lows, period):
    if len(prices) < period:
        return 0
    df = pd.DataFrame({
        'high': highs,
        'low': lows,
        'close': prices
    })
    atr = ta.atr(df['high'], df['low'], df['close'], length=period).iloc[-1]
    return atr if not np.isnan(atr) else 0

# –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_liquidation(message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    try:
        data = message.get('data', {})
        if not data:
            print("–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return
        symbol = data.get('symbol')
        side = data.get('side')
        volume = float(data.get('size', 0))
        price = float(data.get('price', 0))
        if symbol and side:
            for coin_name, coin_info in COINS.items():
                if symbol == coin_info['symbol']:
                    total_value = volume * price
                    liquidation_queue.put((coin_name, side, total_value))
                    print(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –¥–ª—è {coin_name}: {side}, {total_value:,.0f} USD")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_websocket(symbols):
    ws.liquidation_stream(callback=handle_liquidation, symbol=symbols)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
def detect_trade_signal(coin_name, volume_change, price_change, price, last_price, levels, long_liq, short_liq, ema_short, ema_long, rsi, atr):
    signal = None
    level_info = check_levels(coin_name, price, last_price, levels)
    trend_up = ema_short > ema_long if ema_long else False
    trend_down = ema_short < ema_long if ema_long else False
    price_move = abs(price - last_price)
    atr_threshold = atr * ATR_MULTIPLIER

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG {coin_name.upper()}: level_info={level_info}, volume_change={volume_change:.2f}, trend_up={trend_up}, trend_down={trend_down}, rsi={rsi:.1f}, price_move={price_move:.2f}, atr_threshold={atr_threshold:.2f}, long_liq={long_liq:.0f}, short_liq={short_liq:.0f}")

    if level_info and "–ü—Ä–æ–±–∏—Ç" in level_info and "–≤–≤–µ—Ä—Ö" in level_info and volume_change > VOLUME_THRESHOLD and trend_up and rsi < 70 and price_move > atr_threshold:
        signal = "–õ–û–ù–ì"
        reason = f"{level_info}, –æ–±—ä–µ–º –≤—ã—Ä–æ—Å –Ω–∞ {volume_change:.2f}%, EMA (5/20): {ema_short:.2f}/{ema_long:.2f} (–ó–æ–ª–æ—Ç–æ–π –∫—Ä–µ—Å—Ç), RSI: {rsi:.1f}, –¥–≤–∏–∂–µ–Ω–∏–µ –≤—ã—à–µ ATR*{ATR_MULTIPLIER} ({price_move:.2f} USD)"
        if short_liq > LIQUIDATION_THRESHOLD:
            reason += f", –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —à–æ—Ä—Ç–æ–≤: {short_liq:,.0f} USD"
        sl = min([l for l in levels if l < price], default=price * 0.98)
        tp = max([l for l in levels if l > price], default=price * 1.03)
        return f"üöÄ {signal} –¥–ª—è {coin_name.upper()}\n- –¶–µ–Ω–∞: {price:,.2f} USD\n- {reason}\n- SL: {sl:,.2f} USD\n- TP: {tp:,.2f} USD\n- –í—Ä–µ–º—è: {datetime.utcnow().strftime('%H:%M')} (UTC)"

    elif level_info and "–ü—Ä–æ–±–∏—Ç" in level_info and "–≤–Ω–∏–∑" in level_info and volume_change > VOLUME_THRESHOLD and trend_down and rsi > 30 and price_move > atr_threshold:
        signal = "–®–û–†–¢"
        reason = f"{level_info}, –æ–±—ä–µ–º –≤—ã—Ä–æ—Å –Ω–∞ {volume_change:.2f}%, EMA (5/20): {ema_short:.2f}/{ema_long:.2f} (–ú—ë—Ä—Ç–≤—ã–π –∫—Ä–µ—Å—Ç), RSI: {rsi:.1f}, –¥–≤–∏–∂–µ–Ω–∏–µ –≤—ã—à–µ ATR*{ATR_MULTIPLIER} ({price_move:.2f} USD)"
        if long_liq > LIQUIDATION_THRESHOLD:
            reason += f", –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ª–æ–Ω–≥–æ–≤: {long_liq:,.0f} USD"
        sl = max([l for l in levels if l > price], default=price * 1.02)
        tp = min([l for l in levels if l < price], default=price * 0.97)
        return f"üìâ {signal} –¥–ª—è {coin_name.upper()}\n- –¶–µ–Ω–∞: {price:,.2f} USD\n- {reason}\n- SL: {sl:,.2f} USD\n- TP: {tp:,.2f} USD\n- –í—Ä–µ–º—è: {datetime.utcnow().strftime('%H:%M')} (UTC)"

    elif level_info and "–ü–æ–¥—Ö–æ–¥" in level_info:
        return f"‚ö† {level_info} –¥–ª—è {coin_name.upper()}\n- –¶–µ–Ω–∞: {price:,.2f} USD\n- –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {long_liq + short_liq:,.0f} USD (–õ–æ–Ω–≥–∏: {long_liq:,.0f}, –®–æ—Ä—Ç—ã: {short_liq:,.0f})\n- –í—Ä–µ–º—è: {datetime.utcnow().strftime('%H:%M')} (UTC)"

    return None

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def main():
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await send_message(CHAT_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    last_volumes = {coin: None for coin in COINS}
    last_prices = {coin: None for coin in COINS}
    price_history = {coin: deque(maxlen=max(EMA_LONG_PERIOD, ATR_PERIOD, RSI_PERIOD)) for coin in COINS}
    high_history = {coin: deque(maxlen=ATR_PERIOD) for coin in COINS}
    low_history = {coin: deque(maxlen=ATR_PERIOD) for coin in COINS}
    liquidations = {coin: {'long': 0, 'short': 0} for coin in COINS}
    cycle_liquidations = {coin: {'long': 0, 'short': 0} for coin in COINS}

    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    symbols = [coin_info['symbol'] for coin_info in COINS.values()]
    ws_thread = threading.Thread(target=run_websocket, args=(symbols,), daemon=True)
    ws_thread.start()

    while True:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
        while not liquidation_queue.empty():
            try:
                coin, side, value = liquidation_queue.get_nowait()
                if side == 'Sell':
                    liquidations[coin]['short'] += value
                    cycle_liquidations[coin]['short'] += value
                elif side == 'Buy':
                    liquidations[coin]['long'] += value
                    cycle_liquidations[coin]['long'] += value
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {coin}, {side}, {value:,.0f} USD")
                # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
                global first_liquidation_processed
                if not first_liquidation_processed:
                    first_liquidation_processed = True
                    test_signal = f"‚ö† –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {coin.upper()}\n- –¶–µ–Ω–∞: {last_prices.get(coin, 0):,.2f} USD\n- –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {value:,.0f} USD\n- –í—Ä–µ–º—è: {datetime.utcnow().strftime('%H:%M')} (UTC)"
                    await send_message(CHAT_ID, test_signal)
            except queue.Empty:
                break

        for coin_name, coin_info in COINS.items():
            coin_data = get_coin_data(coin_info['id'])
            if coin_data is None:
                continue

            current_volume = coin_data['volume']
            current_price = coin_data['price']
            price_history[coin_name].append(current_price)
            high_history[coin_name].append(current_price)  # –£–ø—Ä–æ—â–µ–Ω–∏–µ
            low_history[coin_name].append(current_price)  # –£–ø—Ä–æ—â–µ–Ω–∏–µ
            ema_short = calculate_ema(list(price_history[coin_name]), EMA_SHORT_PERIOD)
            ema_long = calculate_ema(list(price_history[coin_name]), EMA_LONG_PERIOD)
            rsi = calculate_rsi(list(price_history[coin_name]), RSI_PERIOD)
            atr = calculate_atr(list(price_history[coin_name]), list(high_history[coin_name]), list(low_history[coin_name]), ATR_PERIOD)

            if last_volumes[coin_name] is not None and last_prices[coin_name] is not None:
                volume_change = ((current_volume - last_volumes[coin_name]) / last_volumes[coin_name]) * 100
                price_change = ((current_price - last_prices[coin_name]) / last_prices[coin_name]) * 100

                signal = detect_trade_signal(
                    coin_name, volume_change, price_change, current_price, last_prices[coin_name],
                    coin_info['levels'], cycle_liquidations[coin_name]['long'], cycle_liquidations[coin_name]['short'],
                    ema_short, ema_long, rsi, atr
                )
                if signal:
                    await send_message(CHAT_ID, signal)

                print(f"{coin_name.upper()} - –û–±—ä–µ–º: {current_volume:,.0f} USD, –¶–µ–Ω–∞: {current_price:,.2f} USD, "
                      f"EMA (5/20): {ema_short:,.2f}/{ema_long:,.2f}, RSI: {rsi:.1f}, ATR: {atr:,.2f}, "
                      f"–ò–∑–º. –æ–±—ä–µ–º–∞: {volume_change:.2f}%, –ò–∑–º. —Ü–µ–Ω—ã: {price_change:.2f}%, "
                      f"–õ–æ–Ω–≥–∏: {liquidations[coin_name]['long']:,.0f} USD, –®–æ—Ä—Ç—ã: {liquidations[coin_name]['short']:,.0f} USD, "
                      f"–¶–∏–∫–ª –õ–æ–Ω–≥–∏: {cycle_liquidations[coin_name]['long']:,.0f} USD, –¶–∏–∫–ª –®–æ—Ä—Ç—ã: {cycle_liquidations[coin_name]['short']:,.0f} USD")
            else:
                print(f"{coin_name.upper()} - –û–±—ä–µ–º: {current_volume:,.0f} USD, –¶–µ–Ω–∞: {current_price:,.2f} USD, "
                      f"EMA (5/20): {ema_short:,.2f}/{ema_long:,.2f}, RSI: {rsi:.1f}, ATR: {atr:,.2f}, "
                      f"–ò–∑–º. –æ–±—ä–µ–º–∞: 0.00%, –ò–∑–º. —Ü–µ–Ω—ã: 0.00%, "
                      f"–õ–æ–Ω–≥–∏: {liquidations[coin_name]['long']:,.0f} USD, –®–æ—Ä—Ç—ã: {liquidations[coin_name]['short']:,.0f} USD, "
                      f"–¶–∏–∫–ª –õ–æ–Ω–≥–∏: {cycle_liquidations[coin_name]['long']:,.0f} USD, –¶–∏–∫–ª –®–æ—Ä—Ç—ã: {cycle_liquidations[coin_name]['short']:,.0f} USD")

            last_volumes[coin_name] = current_volume
            last_prices[coin_name] = current_price
            await asyncio.sleep(10)

        # –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Ü–∏–∫–ª-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
        for coin in cycle_liquidations:
            cycle_liquidations[coin] = {'long': 0, 'short': 0}

        await asyncio.sleep(CHECK_INTERVAL)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())